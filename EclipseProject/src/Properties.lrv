IMPORTS
{
    import java.util.Arrays;
    import java.util.ArrayList;

    import event_replayer.Event;
}

GLOBAL
{

    VARIABLES
    {
        boolean generatedPreKeys = false;
        boolean ikType = false;
        boolean skType = false;
        boolean pkType = false;

        boolean bundleCreated = false;
        boolean bundleModified = false;

        boolean pkRotate = false;

        boolean pkAvailable = false;

        boolean pkRefillExpected = false;
        boolean pkUsed = false;
        boolean spkFound = false;

		boolean bundleBChanged = false;
        boolean ikSame = false;
        boolean spkSame = false;
        boolean spkSigSame = false;
        boolean pkDeleted = false;
        boolean pkSame = false;
        boolean sharedSecretSame = false;
        boolean associatedDataSame = false;

    }

    EVENTS
    {
        before_create(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("BEFORE") &&
                e1.getWhat().equals("create")
            } where {
                e = e1; 
            }

        after_create(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("AFTER") &&
                e1.getWhat().equals("create")
            } where {
                e = e1;          
                ikType = (boolean)e1.getWatch().get("identity_key_type");
                skType = (boolean)e1.getWatch().get("signed_pre_key_type");
                pkType = (boolean)e1.getWatch().get("pre_keys_type");
            }
		
 
        before_generate_pre_keys(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("BEFORE") &&
                e1.getWhat().equals("generate_pre_keys")
            } where {
                e = e1;
            }

        after_generate_pre_keys(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("AFTER") &&
                e1.getWhat().equals("generate_pre_keys")
            } where {
                e = e1;
                generatedPreKeys = (boolean)e1.getWatch().get("pre_key_generated");    
            }

        before_delete_pre_key(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("BEFORE") &&
                e1.getWhat().equals("delete_pre_key")
            } where {
                e = e1;
            }

        after_delete_pre_key(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("AFTER") &&
                e1.getWhat().equals("delete_pre_key")
            } where {
                e = e1;
                pkDeleted = (boolean)e1.getWatch().get("pre_key_deleted");
            }

        before_publish_bundle(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("BEFORE") &&
                e1.getWhat().equals("publish_bundle")
            } where {
                e = e1;
            }

        after_publish_bundle(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("AFTER") &&
                e1.getWhat().equals("publish_bundle")
            } where {
                e = e1;
                bundleCreated = (boolean)e1.getWatch().get("bundle_created");
                bundleModified = (boolean)e1.getWatch().get("bundle_modified");
            }


        before_rotate_signed_pre_key(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("BEFORE") &&
                e1.getWhat().equals("rotate_signed_pre_key")
            } where {
                e = e1;
            }

        after_rotate_signed_pre_key(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("AFTER") &&
                e1.getWhat().equals("rotate_signed_pre_key")
            } where {
                e = e1;
                pkRotate = (boolean)e1.getWatch().get("pre_key_rotated");
            }

        before_get_shared_secret_active(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("BEFORE") &&
                e1.getWhat().equals("get_shared_secret_active")
            } where {
                e = e1;
                pkAvailable = (boolean)e1.getWatch().get("pre_keys_available");
            }

        exception_get_shared_secret_active(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("KeyAgreementException") &&
                e1.getWhat().equals("get_shared_secret_active")
            } where {
                e = e1;
            }

        after_get_shared_secret_active(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("AFTER") &&
                e1.getWhat().equals("get_shared_secret_active")
            } where {
                e = e1;
            }

        before_get_shared_secret_passive(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("BEFORE") &&
                e1.getWhat().equals("get_shared_secret_passive")
            } where {
                e = e1;
                pkRefillExpected = (boolean)e1.getWatch().get("refill_expected");
                pkUsed = (boolean)e1.getWatch().get("pre_key_used");
                spkFound = (boolean)e1.getWatch().get("signed_pre_key_found");
            }

        exception_get_shared_secret_passive(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("KeyAgreementException") &&
                e1.getWhat().equals("get_shared_secret_passive")
            } where {
                e = e1;
            }

        after_get_shared_secret_passive(
            Event e
        ) = { Event e1.replay() }
            filter{
                e1.getWhen().equals("AFTER") &&
                e1.getWhat().equals("get_shared_secret_passive")
            } where {
                e = e1;
                bundleBChanged = (boolean)e1.getWatch().get("bundleB_changed");
                ikSame = (boolean)e1.getWatch().get("identity_key_same");
                spkSame = (boolean)e1.getWatch().get("signed_pre_key_same");
                spkSigSame = (boolean)e1.getWatch().get("signed_pre_key_signature_same");
                pkSame = (boolean)e1.getWatch().get("pre_keys_same");
                sharedSecretSame = (boolean)e1.getWatch().get("shared_secret_same");
                associatedDataSame = (boolean)e1.getWatch().get("associated_data_same");
            }
	}
	
    %%Property 1
    PROPERTY create
    {
        STATES{
            ACCEPTING{stateCreated}
            BAD{bad}
            NORMAL{prekeyGenerated bundlePublished}
            STARTING{start}
        }
        
        TRANSITIONS{
            start -> prekeyGenerated [after_generate_pre_keys \ generatedPreKeys ]
            prekeyGenerated -> bundlePublished [after_publish_bundle \ bundleCreated]
            bundlePublished -> stateCreated [after_create \ ikType && skType && pkType]
            bundlePublished -> bad [after_create \ !ikType || !skType || !pkType \ System.out.println("--> " + e.toString());]
        }
    }

    %%Property 2
    PROPERTY refill 
    {
        STATES{
        	BAD{bad}
            NORMAL{refillExpected prekeyGenerated bundleModified}
            STARTING{start}
        }

        TRANSITIONS{
            start -> refillExpected [before_get_shared_secret_passive \ pkRefillExpected]
            refillExpected -> prekeyGenerated [after_generate_pre_keys \ generatedPreKeys] 
            refillExpected -> bad [after_generate_pre_keys \ !generatedPReKeys \ System.out.println("--> " + e.toString());]
            prekeyGenerated -> bundleModified [after_publish_bundle \ bundleModified]
        }
    }

    %%Property 3
    PROPERTY rotate
    {
        STATES
        {
        	BAD{bad}
            NORMAL{sigPreKeyRotated}
            STARTING{start}
        }

        TRANSITIONS
        {
            start -> sigPreKeyotated [after_rotate_signed_pre_key \ pkRotate]
          	start -> bad [after_rotate_signed_pre_key \ !pkRotate \ System.out.println("--> " + e.toString());]
        }
        
    }

    %%Property 5
    PROPERTY delete
    {
        STATES
        {
        	BAD{bad}
            NORMAL{preKeyedPassive preKeyDeleted}
            STARTING{start}
        }

        TRANSITIONS
        {
            start -> preKeyedPassive [before_get_shared_secret_passive \ pkUsed]
            preKeyedPassive -> preKeyDeleted [after_delete_pre_key \ pkDeleted]
            preKeyedPassive -> bad [after_delete_pre_key \ !pkDeleted \ System.out.println("--> " + e.toString());]
        }
    }

    %%Property 6
    PROPERTY activeException
    {
        STATES
        {
            NORMAL {throwException}
            STARTING{start}
        }

        TRANSITIONS
        {
            start -> throwException [before_get_shared_secret_active \ !pkAvailable]
            throwException -> start [exception_get_shared_secret_active]
        }
    }

    %%Property 8 
    PROPERTY passiveException
    {
        STATES
        {
            NORMAL {throwException}
            STARTING{start}
        }

        TRANSITIONS
        {
            start -> throwException [before_get_shared_secret_passive \ !spkFound]
            throwException -> start [exception_get_shared_secret_passive]
        }
    }


    
        
 }
